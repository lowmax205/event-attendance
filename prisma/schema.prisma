generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model SecurityLog {
  id        String            @id @default(cuid())
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime          @default(now())
  eventType SecurityEventType @default(LOGIN)
  success   Boolean           @default(true)
  metadata  Json?
  User      User?             @relation(fields: [userId], references: [id])

  @@index([eventType, createdAt])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  isRevoked    Boolean  @default(false)
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([refreshToken])
  @@index([userId])
}

model User {
  id                  String          @id @default(cuid())
  email               String          @unique
  passwordHash        String
  role                Role            @default(Student)
  accountStatus       AccountStatus   @default(ACTIVE)
  emailVerified       Boolean         @default(false)
  createdAt           DateTime        @default(now())
  lastLoginAt         DateTime?
  firstName           String
  lastName            String
  
  // Account management (Phase 3 - FR-007, FR-012, FR-014)
  suspendedAt         DateTime?
  suspendedBy         User?           @relation("SuspendedUsers", fields: [suspendedById], references: [id], onDelete: SetNull)
  suspendedById       String?
  suspendedUsers      User[]          @relation("SuspendedUsers")
  
  passwordResetAt     DateTime?
  passwordResetBy     User?           @relation("PasswordResets", fields: [passwordResetById], references: [id], onDelete: SetNull)
  passwordResetById   String?
  passwordResets      User[]          @relation("PasswordResets")
  
  deletedAt           DateTime?
  deletedBy           User?           @relation("DeletedUsers", fields: [deletedById], references: [id], onDelete: SetNull)
  deletedById         String?
  deletedUsers        User[]          @relation("DeletedUsers")
  
  // Relations
  attendances         Attendance[]
  verifiedAttendances Attendance[]    @relation("AttendanceVerifier")
  createdEvents       Event[]         @relation("EventCreator")
  deletedEvents       Event[]         @relation("DeletedEvents")
  exports             ExportRecord[]  @relation("UserExports")
  SecurityLog         SecurityLog[]
  Session             Session[]
  systemConfigUpdates SystemConfig[]  @relation("SystemConfigUpdater")
  UserProfile         UserProfile?

  @@index([email])
  @@index([role])
  @@index([accountStatus])
  @@index([suspendedById])
  @@index([deletedAt])
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  section           String?
  department        String
  updatedAt         DateTime @updatedAt
  contactNumber     String?
  createdAt         DateTime @default(now())
  studentId         String   @unique
  yearLevel         Int
  documentUrls      String[] @default([])
  profilePictureUrl String?
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Event {
  id                 String       @id @default(cuid())
  name               String
  description        String?
  startDateTime      DateTime
  endDateTime        DateTime
  venueLatitude      Float
  venueLongitude     Float
  venueName          String
  venueAddress       String?
  checkInBufferMins  Int          @default(30)
  checkOutBufferMins Int          @default(30)
  qrCodeUrl          String?
  qrCodePayload      String       @unique
  status             EventStatus  @default(Active)
  createdById        String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  
  // Phase 3 - Audit trail and deletion prevention (FR-017, FR-020)
  editHistory        Json?
  hasAttendances     Boolean      @default(false)
  deletedAt          DateTime?
  deletedBy          User?        @relation("DeletedEvents", fields: [deletedById], references: [id], onDelete: SetNull)
  deletedById        String?
  
  // Relations
  attendances        Attendance[]
  createdBy          User         @relation("EventCreator", fields: [createdById], references: [id])

  @@index([startDateTime, endDateTime])
  @@index([status])
  @@index([createdById])
  @@index([status, startDateTime])
  @@index([deletedAt])
}

model Attendance {
  id                  String             @id @default(cuid())
  eventId             String
  userId              String
  verificationStatus  VerificationStatus @default(Pending)
  verifiedById        String?
  verifiedAt          DateTime?
  
  // Phase 3 - Dispute workflow (FR-033, FR-034, FR-041)
  disputeNote         String?            @db.Text
  appealMessage       String?            @db.Text
  resolutionNotes     String?            @db.Text
  
  checkInBackPhoto    String?
  checkInDistance     Float?
  checkInFrontPhoto   String?
  checkInIpAddress    String?
  checkInLatitude     Float?
  checkInLongitude    Float?
  checkInSignature    String?
  checkInSubmittedAt  DateTime?
  checkInUserAgent    String?
  checkOutBackPhoto   String?
  checkOutDistance    Float?
  checkOutFrontPhoto  String?
  checkOutIpAddress   String?
  checkOutLatitude    Float?
  checkOutLongitude   Float?
  checkOutSignature   String?
  checkOutSubmittedAt DateTime?
  checkOutUserAgent   String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @default(now()) @updatedAt
  
  // Relations
  event               Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verifiedBy          User?              @relation("AttendanceVerifier", fields: [verifiedById], references: [id])

  @@unique([eventId, userId])
  @@index([userId, checkInSubmittedAt])
  @@index([eventId, verificationStatus])
  @@index([verificationStatus])
  @@index([verifiedById, verifiedAt])
  @@index([checkInSubmittedAt])
}

model SystemConfig {
  id                        String   @id @default(cuid())
  defaultGpsRadiusMeters    Int      @default(100)
  defaultCheckInBufferMins  Int      @default(30)
  defaultCheckOutBufferMins Int      @default(30)
  updatedAt                 DateTime @updatedAt
  updatedById               String
  updatedBy                 User     @relation("SystemConfigUpdater", fields: [updatedById], references: [id])
}

model ExportRecord {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  exportedBy   User         @relation("UserExports", fields: [exportedById], references: [id])
  exportedById String
  format       ExportFormat
  filters      Json
  recordCount  Int
  status       ExportStatus @default(PENDING)
  errorMessage String?      @db.Text
  fileSize     Int?
  downloadUrl  String?
  expiresAt    DateTime?

  @@index([exportedById, createdAt])
  @@index([createdAt])
  @@index([status])
}

enum Role {
  Student
  Moderator
  Administrator
}

enum AccountStatus {
  ACTIVE
  SUSPENDED
}

enum EventStatus {
  Active
  Completed
  Cancelled
}

enum VerificationStatus {
  Pending
  Approved
  Rejected
  Disputed
}

enum ExportFormat {
  CSV
  XLSX
}

enum ExportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SecurityEventType {
  REGISTRATION
  LOGIN
  LOGOUT
  FAILED_LOGIN
  PASSWORD_CHANGE
  USER_ROLE_CHANGED
  USER_STATUS_CHANGED
  USER_CREATED
  USER_PASSWORD_RESET
  USER_DELETED
  EVENT_CREATED
  EVENT_EDITED
  EVENT_DELETED
  ATTENDANCE_VERIFIED
  ATTENDANCE_REJECTED
  ATTENDANCE_APPEALED
  DISPUTE_RESOLVED
  DATA_EXPORTED
  ANALYTICS_ACCESSED
}
